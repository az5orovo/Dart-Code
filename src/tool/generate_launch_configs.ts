import * as fs from "fs";
import * as path from "path";
import { getDebugAdapterPort } from "../shared/utils/debug";
import { readDirAsync } from "../shared/utils/fs";

const launchConfigPath = ".vscode/launch.json";
const debuggerFolder = "src/debug";
const testFolder = "out/src/test";
const testProjectsFolder = "src/test/test_projects";

const testConfigs = [
	{ testFolder: "multi_root", project: "projects.code-workspace" },
	{ testFolder: "dart_create_tests", project: "dart_create_tests.code-workspace" },
	{ testFolder: "flutter_create_tests", project: "flutter_create_tests.code-workspace" },
	{ testFolder: "multi_project_folder", project: "" },
	{ testFolder: "dart", project: "hello_world" },
	{ testFolder: "dart", project: "hello_world", lsp: true },
	{ testFolder: "dart_debug", project: "hello_world" },
	{ testFolder: "web_debug", project: "web" },
	{ testFolder: "flutter", project: "flutter_hello_world" },
	{ testFolder: "flutter_bazel", project: "bazel_workspace/flutter_hello_world_bazel" },
	{ testFolder: "flutter_snap", project: "empty" },
	{ testFolder: "flutter", project: "flutter_hello_world", lsp: true },
	{ testFolder: "flutter_debug", project: "flutter_hello_world" },
	{ testFolder: "flutter_debug", project: "flutter_hello_world", chrome: true },
	{ testFolder: "flutter_test_debug", project: "flutter_hello_world" },
	{ testFolder: "flutter_repository", project: "${env:FLUTTER_ROOT}" },
	{ testFolder: "not_activated/dart_create", project: "empty" },
	{ testFolder: "not_activated/flutter_create", project: "empty" },
];

async function main() {
	const debugAdapters = (await readDirAsync(debuggerFolder))
		.filter((dirent) => dirent.isFile && dirent.name.endsWith("_entry.ts"));
	const launchConfig = {
		"version": "0.1.0",
		"configurations": [
			getExtensionConfig(),
			getGenerateLaunchConfigConfig(),
			...debugAdapters.map((dirent) => getDebugServerConfig(dirent.name, dirent.name)),
			...testConfigs.map((test) => getTestsConfig(test.testFolder, test.project, test.lsp, test.chrome)),
		],
		"compounds": [
			{
				"name": "Extension + Debug Adapter Servers",
				"configurations": [
					"Extension",
					...debugAdapters.map((dirent) => getDebugServerConfigName(dirent.name))
				],
				"presentation": {
					"group": "",
					"order": 1
				},
				"stopAll": true,
			},
			{
				"name": "Debug Adapter Servers",
				"configurations": debugAdapters.map((dirent) => getDebugServerConfigName(dirent.name)),
				"stopAll": true,
			},
		],
	}

	const header = '// This file was generated by src/tool/generate_launch_configs.ts!';
	const configJson = JSON.stringify(launchConfig, undefined, "\t");
	fs.writeFileSync(launchConfigPath, `${header}\n${configJson}\n`);
}

const template = {
	"request": "launch",
	"outFiles": [
		"${workspaceFolder}/out/**/*.js"
	],
	"smartStep": true,
	"skipFiles": [
		"<node_internals>/**",
		"**/app/out/vs/**"
	]
};

function getConfigName(input: string) {
	input = input.replace("_debug_entry.ts", "");
	return input.split("_").map(titleCase).join(" ");
}

function getDebugServerConfigName(input: string) {
	return `${getConfigName(input)} Debug Server`;
}

function titleCase(input: string) {
	return `${input[0].toUpperCase()}${input.slice(1)}`;
}

function getExtensionConfig() {
	return Object.assign({
		"name": "Extension",
		"type": "extensionHost",
		"runtimeExecutable": "${execPath}",
		"args": [
			"--extensionDevelopmentPath=${workspaceFolder}"
		],
		"env": {
			"DART_CODE_USE_DEBUG_SERVERS": "true",
		},
		"preLaunchTask": "npm: watch",
	}, template);
}

function getGenerateLaunchConfigConfig() {
	return Object.assign({
		"name": "Generate launch.json",
		"type": "node",
		"cwd": "${workspaceFolder}",
		"program": "${workspaceFolder}/src/tool/generate_launch_configs.ts",
		"preLaunchTask": "npm: watch-tests",
	}, template);
}

function getDebugServerConfig(filename: string, source: string) {
	const port = getDebugAdapterPort(path.basename(source).split(".")[0]);
	return Object.assign({
		"name": getDebugServerConfigName(filename),
		"type": "node",
		"cwd": "${workspaceFolder}",
		"program": `\${workspaceFolder}/${debuggerFolder}/${source}`,
		"args": [
			`--server=${port}`
		],
		"preLaunchTask": "npm: watch",
	}, template);
}

function getTestsConfig(testPath: string, project: string, lsp = false, chrome = false) {
	let name = getConfigName(testPath);
	if (lsp)
		name = `${name} LSP`;
	if (chrome)
		name = `${name} Chrome`;
	return Object.assign({
		"name": `Launch Tests (${name})`,
		"type": "extensionHost",
		"runtimeExecutable": "${execPath}",
		"args": [
			project.startsWith("${env:") ? project : `\${workspaceFolder}/${testProjectsFolder}/${project}`,
			"--extensionDevelopmentPath=${workspaceFolder}",
			`--extensionTestsPath=\${workspaceFolder}/${testFolder}/${testPath}`,
			"--user-data-dir=${workspaceFolder}/.dart_code_test_data_dir"
		],
		"env": {
			"DART_CODE_IS_TEST_RUN": "true",
			"DART_CODE_FORCE_LSP": lsp ? "true" : undefined,
			"FLUTTER_TEST_DEVICE_ID": chrome ? "chrome" : undefined,
		},
		"preLaunchTask": "npm: watch-tests",
	}, template);
}

// tslint:disable-next-line: no-floating-promises
main();
