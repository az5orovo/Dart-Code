// This file was generated by Dart-Code-Class-Builder
// and should not be hand-edited!

"use strict";

import * as as from "./analysis_server_types";
import * as a from "./analyzer";

export abstract class AnalyzerGen {
	protected abstract sendRequest<TReq, TResp>(method: string, params: TReq): Thenable<TResp>;

	protected abstract serverConnected(notification: as.ServerConnectedNotification);

	protected handleNotification(evt: a.UnknownNotification) {
		switch (evt.event) {
			case "server.connected":
				this.serverConnected(<as.ServerConnectedNotification>evt.params);
				break;
		}
	}

	serverGetVersion(request: as.ServerGetVersionRequest): Thenable<as.ServerGetVersionResponse> {
		return this.sendRequest("server.getVersion", request);
	}

	serverShutdown(request: as.ServerShutdownRequest): Thenable<a.UnknownResponse> {
		return this.sendRequest("server.shutdown", request);
	}

	serverSetSubscriptions(request: as.ServerSetSubscriptionsRequest): Thenable<a.UnknownResponse> {
		return this.sendRequest("server.setSubscriptions", request);
	}

	analysisGetErrors(request: as.AnalysisGetErrorsRequest): Thenable<as.AnalysisGetErrorsResponse> {
		return this.sendRequest("analysis.getErrors", request);
	}

	analysisGetHover(request: as.AnalysisGetHoverRequest): Thenable<as.AnalysisGetHoverResponse> {
		return this.sendRequest("analysis.getHover", request);
	}

	analysisGetReachableSources(request: as.AnalysisGetReachableSourcesRequest): Thenable<as.AnalysisGetReachableSourcesResponse> {
		return this.sendRequest("analysis.getReachableSources", request);
	}

	analysisGetLibraryDependencies(request: as.AnalysisGetLibraryDependenciesRequest): Thenable<as.AnalysisGetLibraryDependenciesResponse> {
		return this.sendRequest("analysis.getLibraryDependencies", request);
	}

	analysisGetNavigation(request: as.AnalysisGetNavigationRequest): Thenable<as.AnalysisGetNavigationResponse> {
		return this.sendRequest("analysis.getNavigation", request);
	}

	analysisReanalyze(request: as.AnalysisReanalyzeRequest): Thenable<a.UnknownResponse> {
		return this.sendRequest("analysis.reanalyze", request);
	}

	analysisSetAnalysisRoots(request: as.AnalysisSetAnalysisRootsRequest): Thenable<a.UnknownResponse> {
		return this.sendRequest("analysis.setAnalysisRoots", request);
	}

	analysisSetGeneralSubscriptions(request: as.AnalysisSetGeneralSubscriptionsRequest): Thenable<a.UnknownResponse> {
		return this.sendRequest("analysis.setGeneralSubscriptions", request);
	}

	analysisSetPriorityFiles(request: as.AnalysisSetPriorityFilesRequest): Thenable<a.UnknownResponse> {
		return this.sendRequest("analysis.setPriorityFiles", request);
	}

	analysisSetSubscriptions(request: as.AnalysisSetSubscriptionsRequest): Thenable<a.UnknownResponse> {
		return this.sendRequest("analysis.setSubscriptions", request);
	}

	analysisUpdateContent(request: as.AnalysisUpdateContentRequest): Thenable<as.AnalysisUpdateContentResponse> {
		return this.sendRequest("analysis.updateContent", request);
	}

	analysisUpdateOptions(request: as.AnalysisUpdateOptionsRequest): Thenable<a.UnknownResponse> {
		return this.sendRequest("analysis.updateOptions", request);
	}

	completionGetSuggestions(request: as.CompletionGetSuggestionsRequest): Thenable<as.CompletionGetSuggestionsResponse> {
		return this.sendRequest("completion.getSuggestions", request);
	}

	searchFindElementReferences(request: as.SearchFindElementReferencesRequest): Thenable<as.SearchFindElementReferencesResponse> {
		return this.sendRequest("search.findElementReferences", request);
	}

	searchFindMemberDeclarations(request: as.SearchFindMemberDeclarationsRequest): Thenable<as.SearchFindMemberDeclarationsResponse> {
		return this.sendRequest("search.findMemberDeclarations", request);
	}

	searchFindMemberReferences(request: as.SearchFindMemberReferencesRequest): Thenable<as.SearchFindMemberReferencesResponse> {
		return this.sendRequest("search.findMemberReferences", request);
	}

	searchFindTopLevelDeclarations(request: as.SearchFindTopLevelDeclarationsRequest): Thenable<as.SearchFindTopLevelDeclarationsResponse> {
		return this.sendRequest("search.findTopLevelDeclarations", request);
	}

	searchGetTypeHierarchy(request: as.SearchGetTypeHierarchyRequest): Thenable<as.SearchGetTypeHierarchyResponse> {
		return this.sendRequest("search.getTypeHierarchy", request);
	}

	editFormat(request: as.EditFormatRequest): Thenable<as.EditFormatResponse> {
		return this.sendRequest("edit.format", request);
	}

	editGetAssists(request: as.EditGetAssistsRequest): Thenable<as.EditGetAssistsResponse> {
		return this.sendRequest("edit.getAssists", request);
	}

	editGetAvailableRefactorings(request: as.EditGetAvailableRefactoringsRequest): Thenable<as.EditGetAvailableRefactoringsResponse> {
		return this.sendRequest("edit.getAvailableRefactorings", request);
	}

	editGetFixes(request: as.EditGetFixesRequest): Thenable<as.EditGetFixesResponse> {
		return this.sendRequest("edit.getFixes", request);
	}

	editGetRefactoring(request: as.EditGetRefactoringRequest): Thenable<as.EditGetRefactoringResponse> {
		return this.sendRequest("edit.getRefactoring", request);
	}

	editSortMembers(request: as.EditSortMembersRequest): Thenable<as.EditSortMembersResponse> {
		return this.sendRequest("edit.sortMembers", request);
	}

	editOrganizeDirectives(request: as.EditOrganizeDirectivesRequest): Thenable<as.EditOrganizeDirectivesResponse> {
		return this.sendRequest("edit.organizeDirectives", request);
	}

	executionCreateContext(request: as.ExecutionCreateContextRequest): Thenable<as.ExecutionCreateContextResponse> {
		return this.sendRequest("execution.createContext", request);
	}

	executionDeleteContext(request: as.ExecutionDeleteContextRequest): Thenable<a.UnknownResponse> {
		return this.sendRequest("execution.deleteContext", request);
	}

	executionMapUri(request: as.ExecutionMapUriRequest): Thenable<as.ExecutionMapUriResponse> {
		return this.sendRequest("execution.mapUri", request);
	}

	executionSetSubscriptions(request: as.ExecutionSetSubscriptionsRequest): Thenable<a.UnknownResponse> {
		return this.sendRequest("execution.setSubscriptions", request);
	}

	diagnosticGetDiagnostics(request: as.DiagnosticGetDiagnosticsRequest): Thenable<as.DiagnosticGetDiagnosticsResponse> {
		return this.sendRequest("diagnostic.getDiagnostics", request);
	}
}
